{"version":3,"sources":["component/List.js","component/UseFetch.js","App.js","serviceWorker.js","index.js"],"names":["List","content","map","item","key","id","href","avatar_url","login","site_admin","toString","Object","keys","length","UseFetch","url","useState","setContent","isLoaded","setIsLoaded","useEffect","fetch","then","response","json","data","App","useFetch","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kJAoBeA,G,KAnBF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,OACE,4BACGA,EAAQC,KAAI,SAACC,GAAD,OACX,wBAAIC,IAAKD,EAAKE,IACZ,4BACE,4CACe,uBAAGC,KAAMH,EAAKI,YAAaJ,EAAKI,aAE/C,uCAAaJ,EAAKK,OAClB,4CAAkBL,EAAKM,WAAWC,YAClC,iDAAuBC,OAAOC,KAAKT,GAAMU,gB,OCMtCC,EAhBE,SAACC,GAAS,IAAD,EACMC,mBAAS,MADf,mBACjBf,EADiB,KACRgB,EADQ,OAEQD,oBAAS,GAFjB,mBAEjBE,EAFiB,KAEPC,EAFO,KAaxB,OATAC,qBAAU,WACRC,MAAMN,GACHO,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLR,EAAWQ,GACXN,GAAY,QAEf,IAEI,CAAElB,UAASiB,aCOLQ,EAlBH,WAAO,IAAD,EACcC,EAC5B,mDADM1B,EADQ,EACRA,QAASiB,EADD,EACCA,SAIjB,OACE,6BACIA,EAGA,yBAAKU,UAAU,OACb,kBAAC,EAAD,CAAM3B,QAASA,KAHjB,6CCAY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.063060bd.chunk.js","sourcesContent":["import React from \"react\";\r\nconst List = ({ content }) => {\r\n  return (\r\n    <ol>\r\n      {content.map((item) => (\r\n        <li key={item.id}>\r\n          <ul>\r\n            <li>\r\n              Avatar Url : <a href={item.avatar_url}>{item.avatar_url}</a>\r\n            </li>\r\n            <li>Login : {item.login}</li>\r\n            <li>Site Admin : {item.site_admin.toString()}</li>\r\n            <li>Number of Items : {Object.keys(item).length}</li>\r\n          </ul>\r\n        </li>\r\n      ))}\r\n    </ol>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst UseFetch = (url) => {\r\n  const [content, setContent] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setContent(data);\r\n        setIsLoaded(true);\r\n      });\r\n  }, []);\r\n\r\n  return { content, isLoaded };\r\n};\r\n\r\nexport default UseFetch;\r\n","import React, { useState, useEffect } from \"react\";\nimport List from \"./component/List\";\nimport useFetch from \"./component/UseFetch\";\n\nconst App = () => {\n  const { content, isLoaded } = useFetch(\n    \"https://api.github.com/users?since=0&per_page=2\"\n  );\n\n  return (\n    <div>\n      {!isLoaded ? (\n        <div>lodaing...</div>\n      ) : (\n        <div className=\"App\">\n          <List content={content} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}